# This is a basic workflow to help you get started with Actions

name: Godot Build PC Artifact

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master, develop, new-github-actions ]
  pull_request:
    branches: [ master, develop, new-github-actions ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  crashreport-build-windows:
    runs-on: windows-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install appdirs easygui pyinstaller
          ./build_crashreport_windows.bat
      - name: Upload a Build Artifact Windows
        uses: actions/upload-artifact@v2.2.4
        with:
          name: build-crashreport-windows
          path: crashreport/win/dist
  crashreport-build-osx:
    runs-on: macos-latest
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install appdirs easygui pyinstaller
          sudo chmod +x ./build_crashreport_osx.sh
          ./build_crashreport_osx.sh
      - name: Upload a Build Artifact osx
        uses: actions/upload-artifact@v2.2.4
        with:
          name: build-crashreport-osx
          path: crashreport/osx/dist
  crashreport-build-linux:
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        python-version: [3.8]
    steps:
      - uses: actions/checkout@v2.3.4
      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install appdirs easygui pyinstaller
          sudo chmod +x ./build_crashreport_linux.sh
          ./build_crashreport_linux.sh
      - name: Upload a Build Artifact x11-64
        uses: actions/upload-artifact@v2.2.4
        with:
          name: build-crashreport-x11-64
          path: crashreport/x11/dist
  # This workflow contains a single job called "build"
  godot-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04

    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2.3.4
      # Runs a set of commands using the runners shell
      - name: Build everything
        run: |
          sudo chmod +x ./build_game.sh
          ./build_game.sh
      - name: Upload a Build Artifact x11-64
        uses: actions/upload-artifact@v2.2.4
        with:
          name: build-x11-64
          path: builds/x11-64-standard
      - name: Upload a Build Artifact osx-64
        uses: actions/upload-artifact@v2.2.4
        with:
          name: build-osx-64
          path: builds/osx-standard
      - name: Upload a Build Artifact win-64
        uses: actions/upload-artifact@v2.2.4
        with:
          name: build-win-64
          path: builds/win-64-standard
  do-release:
    runs-on: ubuntu-18.04
    needs: [godot-build, crashreport-build-windows, crashreport-build-linux, crashreport-build-osx]
    steps:
    - uses: actions/checkout@v2
    - name: Declare some variables
      id: vars
      shell: bash
      run: |
        echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
        echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
    - uses: actions/download-artifact@v2
      with:
        path: artifacts
    - name: Prepare files for releasing
      run: |
        cd $GITHUB_WORKSPACE/artifacts
        cp -r build-crashreport-osx/send_log/ build-osx-64
        cp -r build-crashreport-x11-64/send_log/ build-x11-64
        cp -r build-crashreport-windows/send_log/ build-win-64
        cd $GITHUB_WORKSPACE/artifacts/build-osx-64
        sudo zip -r build-osx-64.zip *
        cd $GITHUB_WORKSPACE/artifacts/build-x11-64
        sudo zip -r build-x11-64.zip *
        cd $GITHUB_WORKSPACE/artifacts/build-win-64
        sudo zip -r build-win-64.zip *
    - name: Create Release
      id: create_release
      uses: actions/create-release@v1.1.4
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
      with:
        tag_name: ${{ steps.vars.outputs.sha_short }}
        release_name: Release ${{ steps.vars.outputs.sha_short }}
        draft: false
        prerelease: false
    - name: Upload Release Asset - x11-64
      id: upload-release-asset-x1164
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: artifacts/build-x11-64/build-x11-64.zip
        asset_name: build-x11-64.zip
        asset_content_type: application/zip
    - name: Upload Release Asset - osx-64
      id: upload-release-asset-osx64
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: artifacts/build-osx-64/build-osx-64.zip
        asset_name: build-osx-64.zip
        asset_content_type: application/zip
    - name: Upload Release Asset - win-64
      id: upload-release-asset-win64
      uses: actions/upload-release-asset@v1.0.2
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
        asset_path: artifacts/build-win-64/build-win-64.zip
        asset_name: build-win-64.zip
        asset_content_type: application/zip
  delete-artifacts:
    runs-on: ubuntu-18.04
    needs: [do-release, godot-build, crashreport-build-windows, crashreport-build-linux, crashreport-build-osx]
    steps:
    - uses: actions/checkout@v1
    - uses: geekyeggo/delete-artifact@v1
      with:
        name: |
          build-win-64
          build-osx-64
          build-x11-64
          build-crashreport-x11-64
          build-crashreport-osx
          build-crashreport-windows

