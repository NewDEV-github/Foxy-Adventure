# This is a basic workflow to help you get started with Actions

name: Godot Build PC Artifact

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    paths-ignore: .github/workflows/gdnative.yml
    branches: [ master, develop, new-github-actions ]
  pull_request:
    branches: [ master, develop, new-github-actions ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  godot-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    strategy:
      matrix:
        godot-version: [3.4]
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2.4.0
      # Runs a set of commands using the runners shell
      - name: Build everything
        run: |
          sudo chmod +x ./build_game.sh
          ./build_game.sh -godot_version_number ${{ matrix.godot-version }} -godot_version_status "stable" -build_mode "source" -base_path $GITHUB_WORKSPACE
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          draft: false
          prerelease: false
      - name: Upload Release Asset - x11
        id: upload-release-asset-x11 
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: builds/${{ matrix.godot-version }}.stable/x11-64-standard/build.zip
          asset_name: build-x11-64-${{ matrix.godot-version }}.zip
      - name: Upload Release Asset - osx
        id: upload-release-asset-osx
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: builds/${{ matrix.godot-version }}.stable/osx-standard/build.zip
          asset_name: build-osx-${{ matrix.godot-version }}.zip
      - name: Upload Release Asset - win
        id: upload-release-asset-win
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: builds/${{ matrix.godot-version }}.stable/win-64-standard/build.zip
          asset_name: build-win-64-${{ matrix.godot-version }}.zip
    
