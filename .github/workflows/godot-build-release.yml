# This is a basic workflow to help you get started with Actions

name: Godot Build PC Release

# Controls when the action will run. 
on:
  # Triggers the workflow on push or pull request events but only for the master branch
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:

jobs:
  # This workflow contains a single job called "build"
  godot-build:
    # The type of runner that the job will run on
    runs-on: ubuntu-18.04
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2.3.4
      # Runs a set of commands using the runners shell
      - name: Declare some variables
        id: vars
        shell: bash
        run: |
          echo "##[set-output name=branch;]$(echo ${GITHUB_REF#refs/heads/})"
          echo "::set-output name=sha_short::$(git rev-parse --short HEAD)"
      - name: Build everything
        run: |
          sudo chmod +x ./build_game.sh
          ./build_game.sh
      - name: ZIP Builds
        run: |
          cd $GITHUB_WORKSPACE/builds/win-64-standard
          sudo zip -r build-win-64.zip *
          cd $GITHUB_WORKSPACE/builds/x11-64-standard
          sudo zip -r build-x11-64.zip *
          cd $GITHUB_WORKSPACE/builds/osx-standard
          sudo zip -r build-osx-64.zip *
      - name: Create Release
        id: create_release
        uses: actions/create-release@v1.1.4
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }} # This token is provided by Actions, you do not need to create your own token
        with:
          tag_name: ${{ steps.vars.outputs.sha_short }}
          release_name: Release ${{ steps.vars.outputs.sha_short }}
          draft: false
          prerelease: false
      - name: Upload Release Asset - x11-64
        id: upload-release-asset-x1164
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: builds/x11-64-standard/build-x11-64.zip
          asset_name: build-x11-64.zip
          asset_content_type: application/zip
      - name: Upload Release Asset - osx-64
        id: upload-release-asset-osx64
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: builds/osx-standard/build-osx-64.zip
          asset_name: build-osx-64.zip
          asset_content_type: application/zip
      - name: Upload Release Asset - win-64
        id: upload-release-asset-win64
        uses: actions/upload-release-asset@v1.0.2
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }} # This pulls from the CREATE RELEASE step above, referencing it's ID to get its outputs object, which include a `upload_url`. See this blog post for more info: https://jasonet.co/posts/new-features-of-github-actions/#passing-data-to-future-steps 
          asset_path: builds/win-64-standard/build-win-64.zip
          asset_name: build-win-64.zip
          asset_content_type: application/zip
